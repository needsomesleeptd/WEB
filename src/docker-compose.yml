version: "3.9"
services:




  postgres-master:
    container_name: postgres-master
    image: bitnami/postgresql:16
    volumes:
      - ./migrations:/docker-entrypoint-initdb.d/
    #  - ./data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRESQL_REPLICATION_USER: repl_user
      POSTGRESQL_REPLICATION_PASSWORD: repl
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: admin
      POSTGRESQL_DATABASE: course
 #     POSTGRESQL_SYNCHRONOUS_COMMIT_MODE : on
 #     POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS : 1
      
      TZ: "Europe/Moscow"
    ports:
      - 5544:5432
    networks:
      - postgres



    
  postgres-slave:
    container_name: postgres-slave
    image: bitnami/postgresql:16
    volumes:
      - ./migrations:/docker-entrypoint-initdb.d
    #  - ./data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRESQL_REPLICATION_MODE: slave
      POSTGRESQL_REPLICATION_USER: repl_user
      POSTGRESQL_REPLICATION_PASSWORD: repl
      POSTGRESQL_MASTER_HOST: postgres-master
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: admin
      POSTGRESQL_DATABASE: course
      POSTGRESQL_MASTER_PORT_NUMBER: 5432
      TZ: "Europe/Moscow"
    depends_on:
      postgres-master:
        condition: service_healthy
    ports:
      - 5545:5432
    networks:
      - postgres



  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:7.2
    environment:
      PGADMIN_DEFAULT_EMAIL: "ggwpez@amil.ru"
      PGADMIN_DEFAULT_PASSWORD: "1"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - postgres

  swagger:  # New Swagger UI service
    image: swaggerapi/swagger-ui
    ports:
      - "3000:8080"  # Maps port 3000 on the host to 8080 in the container
    volumes:
      - ./docs/openapi.yaml:/mnt/openapi.yaml  # Adjust the path to your OpenAPI file
    environment:
      SWAGGER_JSON: /mnt/openapi.yaml  # Points to the OpenAPI YAML file

  
volumes:
  habrdb-data:
  pgadmin-data:

networks:
  postgres:
    driver: bridge